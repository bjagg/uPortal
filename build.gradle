description = "Apereo uPortal $version"

// Build Scans provide detailed information about many aspects of your
// build right in your browser.  (https://scans.gradle.com/plugin)
apply plugin: 'com.gradle.build-scan'

// Adds support for Node.js scripts
apply plugin: 'com.moowork.node'

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.gradle:build-scan-plugin:1.0'
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
        classpath "com.bmuschko:gradle-cargo-plugin:2.2.3"
    }
}

node {
  // Version of node to use.
  version = '6.9.1'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    checkstyle {
        // Stay on checkstyle version 6 until Java version 7 support can be dropped
        toolVersion = '6.19'
        showViolations = true
        configFile = file("${project.rootDir}/checkstyle.xml")
    }

    configurations {
        /*
         * Defines a 'provided' scope similar to the one in Maven.  Dependencies
         * defined using provided will not become transitive dependencies.
         */
        provided

        /*
         * Makes provided dependencies available on the compile classpath in a way
         * that works both from the command line and in Buildship.
         */
        compile.extendsFrom provided

        /*
         * Configure checkstyle
         */
        checkstyle
    }

}

// Deployment support via Tomcat Manager
def tomcats_file = new File('tomcats.groovy')
def tomcats_config = tomcats_file.exists() ? new ConfigSlurper().parse(tomcats_file.toURL()) : null
def deployables_file = new File('deployables.groovy')
def deployables_config = deployables_file.exists() ? new ConfigSlurper().parse(deployables_file.toURL()) : null

apply plugin: 'com.bmuschko.cargo-base'
repositories {
    mavenCentral()
}

import com.bmuschko.gradle.cargo.convention.Deployable
import com.bmuschko.gradle.cargo.tasks.remote.CargoDeployRemote
import com.bmuschko.gradle.cargo.tasks.remote.CargoRedeployRemote

if (tomcats_config && deployables_config) {
    def wars = []
    deployables_config.each {context_name, deployable ->
        wars << new Deployable(context: context_name, file: file(deployable.file))
    }

    tomcats_config.each {name, tomcat ->
        task "deployTo${name}"(type: CargoDeployRemote) {
            description = "Deploys uPortal WAR files to remote Tomcat '${name}'."
            containerId = 'tomcat8x'
            hostname = tomcat.server
            port = tomcat.port
            username = tomcat.username
            password = tomcat.password
            deployables = wars
            group = 'deployment'
        }
        task "redeployTo${name}"(type: CargoRedeployRemote) {
            description = "Redeploys uPortal WAR files to remote Tomcat '${name}'."
            containerId = 'tomcat8x'
            hostname = tomcat.server
            port = tomcat.port
            username = tomcat.username
            password = tomcat.password
            deployables = wars
            group = 'deployment'
        }
    }
}
